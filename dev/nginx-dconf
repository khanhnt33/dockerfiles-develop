#!/bin/bash

CONF_DIR="./conf.d"
HTPASSWD_DIR="./htpasswd"
HTPASSWD_DIR_NGINX="/etc/nginx/htpasswd"
if [ -z "$SIGNAL_CONTAINER" ]; then
	NGINX_CONTAINER=dev_nginx_1
else
	NGINX_CONTAINER="$SIGNAL_CONTAINER"
fi

if [ -z "$CONF_DIR" ] || [ ! -d "$CONF_DIR" ]; then
	echo "missing conf dir"
	exit -1
fi
if [ -z "$HTPASSWD_DIR" ] || [ ! -d "$HTPASSWD_DIR" ]; then
	echo "missing httpasswd dir"
	exit -1
fi

function inspect_container {
	docker inspect -f "traefik.docker.network={{ index .Config.Labels \"traefik.docker.network\" }}
traefik.enable={{ index .Config.Labels \"traefik.enable\" }}
traefik.port={{ index .Config.Labels \"traefik.port\" }}
traefik.frontend.rule={{ index .Config.Labels \"traefik.frontend.rule\" }}
dconf.cert.acme.sh={{ index .Config.Labels \"dconf.cert.acme.sh\" }}
dconf.auth.username={{ index .Config.Labels \"dconf.auth.username\" }}
dconf.auth.password={{ index .Config.Labels \"dconf.auth.password\" }}
com.docker.compose.project={{ index .Config.Labels \"com.docker.compose.project\" }}
com.docker.compose.service={{ index .Config.Labels \"com.docker.compose.service\" }}
NAME={{ .Name }}
NETWORKS={{range \$i, \$e := .NetworkSettings.Networks}}{{ \$i }} {{end}}
IPS={{range \$i, \$e := .NetworkSettings.Networks}}:{{ \$i }}:{{ \$e.IPAddress }};{{end}}" $1
}

function label {
	local IFS=$'\n'
	for LABEL in $LABELS; do
		if [[ "$LABEL" =~ ^$1=(.*) ]]; then
			echo "${BASH_REMATCH[1]}"
		fi
	done;
}

function ip {
	local IPS=$(label IPS)
	local NETWORKS
	local NETWORK
	if [ -z "$1" ]; then
		NETWORKS="$(label NETWORKS)"
		for NETWORK in $NETWORKS; do
			if [[ "$IPS" =~ :$NETWORK:([0-9.]+)\; ]]; then
				echo "${BASH_REMATCH[1]}"
				return
			fi
		done
	else
		if [[ "$IPS" =~ :$1:([0-9.]+)\; ]]; then
			echo "${BASH_REMATCH[1]}"
			return
		fi
	fi
}

function name {
	local N;
	N=$(label NAME)
	echo ${N:1}
}

function config {
	LABELS=$(inspect_container $1)
	NAME=$(name)
	NETWORK=$(label traefik.docker.network)
	IP=$(ip $NETWORK)
	ENABLE=$(label traefik.enable)
	PORT=$(label traefik.port)
	if [ -z "$PORT" ]; then
		PORT=80
	fi
	RULE=$(label traefik.frontend.rule)
	CERT_ACME_SH=$(label dconf.cert.acme.sh)
	USERNAME=$(label dconf.auth.username)
	PASSWORD=$(label dconf.auth.password)
	PROJECT=$(label com.docker.compose.project)
	SERVICE=$(label com.docker.compose.service)

	echo -e "\ncontainer: $NAME\nIP/port: $IP:$PORT network: $NETWORK"
	SERVER=

	if [ "$ENABLE" = "false" ]; then
		echo "skip"
		echo "<tr><td>$PROJECT</td><td>$SERVICE</td><td>$NAME</td><td colspan=2>$NAME not enabled</td></tr>" >> /html/index.html
		return
	fi

	if [ -z "$IP" ]; then
		echo "no ip"
		echo "<tr><td>$PROJECT</td><td>$SERVICE</td><td>$NAME</td><td colspan=2>$NAME missing IP, not connected to proxy network</td></tr>" >> /html/index.html
		return
	fi

	if [[ $RULE == Host:* ]]; then
		X=${RULE:5}
		SERVER=${X//[,]/ }
	fi

	if [ -z "$SERVER" ]; then
		if [ -z "$SERVICE" ]; then
			SERVER="$NAME.docker.localhost"
		else
			SERVER="$SERVICE.$PROJECT.docker.localhost"
		fi
	else
		echo "127.0.0.1 $SERVER" >> /hosts.export/hosts
	fi

	echo "domains: $SERVER"

	echo "<tr><td>$PROJECT</td><td>$SERVICE</td><td>$NAME</td><td>" >> /html/index.html
	for X in $SERVER; do
		echo "<a href=\"http://$X\">http://$X</a><br />" >> /html/index.html
	done
	echo "</td><td>" >> /html/index.html
	for X in $SERVER; do
		echo "<a href=\"https://$X\">https://$X</a><br />" >> /html/index.html
	done
	echo "</td></tr>" >> /html/index.html

	FIRST_SERVER=$(echo $SERVER | cut -d' ' -f1)

	AUTH=
	if [ -n "$PASSWORD" ]; then
		printf "$USERNAME:$(openssl passwd -apr1 $PASSWORD)\n" > "$HTPASSWD_DIR/$FIRST_SERVER"
		AUTH="auth_basic \"Restricted\"; auth_basic_user_file \"$HTPASSWD_DIR_NGINX/$FIRST_SERVER\"; "
	fi

	SSL="ssl_certificate /etc/nginx/certs/hosts.pem; ssl_certificate_key /etc/nginx/certs/hosts-key.pem; ssl_stapling off;"
	if [ -n "$DCONF_ACME_SH_DIR" ] && [ -n "$CERT_ACME_SH" ]; then
		if [ -e "$DCONF_ACME_SH_DIR/$CERT_ACME_SH/fullchain.cer" ] && [ -e "$DCONF_ACME_SH_DIR/$CERT_ACME_SH/$CERT_ACME_SH.key" ]; then
			SSL="ssl_certificate '$DCONF_ACME_SH_DIR/$CERT_ACME_SH/fullchain.cer'; ssl_certificate_key '$DCONF_ACME_SH_DIR/$CERT_ACME_SH/$CERT_ACME_SH.key'; "
		else
			echo "ERROR: Certificate $CERT_ACME_SH not found!"
		fi
	fi

	PROXY="
		proxy_http_version 1.1;
		proxy_buffering off;
		proxy_set_header Host \$http_host;
		proxy_set_header Upgrade \$http_upgrade;
		proxy_set_header Connection \$proxy_connection;
		proxy_set_header X-Real-IP \$remote_addr;
		proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto \$proxy_x_forwarded_proto;
		proxy_set_header X-Forwarded-Ssl \$proxy_x_forwarded_ssl;
		proxy_set_header X-Forwarded-Port \$proxy_x_forwarded_port;
		proxy_set_header Proxy \"\";
		proxy_connect_timeout 60s;
		proxy_send_timeout 300s;
		proxy_read_timeout 300s;
		proxy_set_header Accept-Encoding \"\";

		proxy_buffer_size          128k;
		proxy_buffers              4 256k;
		proxy_busy_buffers_size    256k;

		proxy_pass http://$IP:$PORT;
	"

	AUTHHTTP="$AUTH"
	PROXYHTTP="$PROXY"
	if [ -n "$HTTPS_REDIRECT_ALL" ]; then
		AUTHHTTP="$AUTH"
		PROXYHTTP="return 301 https://\$host\$request_uri;"
	fi

	cat << EOF > "$CONF_DIR/100-$FIRST_SERVER.nginx-dconf.conf"
server {
	listen 80;
	server_name $SERVER;
	access_log /var/log/nginx/access.log vcombined;

	location /.well-known/acme-challenge/ {
		root /html;
		break;
	}

	location / {
		$AUTHHTTP
		$PROXYHTTP
	}
}
server {
	listen 443 ssl http2;
	server_name $SERVER;
	access_log /var/log/nginx/access.log vcombined;
	$SSL
	location / {
		$AUTH
		$PROXY
	}
}
EOF
	echo "$CONF_DIR/100-$FIRST_SERVER.nginx-dconf.conf written."
}


function debounce {
  if [[ ! -f /tmp/dconf_debounce_executing ]]
  then
	touch /tmp/dconf_debounce_executing
	"$@"
	retVal=$?
	{
	  sleep 3
	  if [[ -f /tmp/dconf_debounce_on-finish ]]
	  then
		"$@"
		rm -f /tmp/dconf_debounce_on-finish
	  fi
	  rm -f /tmp/dconf_debounce_executing
	} &
	return $retVal
  elif [[ ! -f /tmp/dconf_debounce_on-finish ]]
  then
	touch /tmp/dconf_debounce_on-finish
  fi
}

function listen {
	while read line ; do
	# ID=$(echo $line | cut -d' ' -f 4)
	# RUNNING=$(docker inspect -f '{{json .State.Running }}' $ID 2> /dev/null)
	# if [ "$RUNNING" == "true" ]; then
	# 	config $ID
	# 	docker kill -s HUP $NGINX_CONTAINER
	# fi
	debounce start
	done < <(docker events --filter "event=start" --filter "event=stop" --filter "label=traefik.port")
}

function start {
	echo '<html><head><title>dev proxy</title></head><body><h1>nginx dconf</h1><table border=1>' > /html/index.html
	date >> /html/index.html
	echo '<tr><th>project</th><th>service</th><th>container</th><th>HTTP</th><th>HTTPS</th></tr>' >> /html/index.html
	rm -rf "$CONF_DIR"/100-*.nginx-dconf.conf /hosts.export/*

	for ID in $(docker ps --filter "label=traefik.port" -q); do
		config $ID
	done

	docker kill -s HUP $NGINX_CONTAINER

	echo '</table>.</body></html>' >> /html/index.html
}

start

listen
