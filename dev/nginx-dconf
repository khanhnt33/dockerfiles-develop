#!/bin/bash

CONF_DIR="./conf.d"

if [ -z "$CONF_DIR" ] || [ ! -d "$CONF_DIR" ]; then
	echo "missing conf dir"
	exit -1
fi

function ip {
	docker inspect --format='{{range $i, $e := .NetworkSettings.Networks}}{{ $i }}:{{ $e.IPAddress }}{{"\n"}}{{end}}' $1 | grep -E "^(proxy:)|(traefik:)" | cut -d: -f2 | head -n 1
}

function name {
	local N;
	N=$(docker inspect -f '{{ .Name }}' $1)
	echo ${N:1}
}

function label {
	docker inspect -f "{{ index .Config.Labels \"$1\" }}" $2
}

function config {
	NAME=$(name $1)
	IP=$(ip $1)
	ENABLE=$(label traefik.enable $1)
	PORT=$(label traefik.port $1)
	if [ -z "$PORT" ]; then
		PORT=80
	fi
	# NETWORK=$(label traefik.docker.network $1)
	RULE=$(label traefik.frontend.rule $1)

	echo
	echo $NAME $IP $ENABLE $PORT $RULE
	SERVER=

	if [ -n "$IP" ]; then
		if [[ $RULE == Host:* ]]; then
			X=${RULE:5}
			SERVER=${X//[,]/ }
		fi

		if [ -z "$SERVER" ]; then
			PROJECT=$(label com.docker.compose.project $1)
			SERVICE=$(label com.docker.compose.service $1)
			if [ -z "$SERVICE" ]; then
				SERVER="$NAME.docker.localhost"
			else
				SERVER="$SERVICE.$PROJECT.docker.localhost"
			fi
		fi

		echo $SERVER

		echo "<li><strong>$NAME</strong><br />" >> /html/index.html
		for X in $SERVER; do
			echo "<a href=\"http://$X\">http://$X</a> <a href=\"https://$X\">https://$X</a><br />"  >> /html/index.html
		done;
		echo '</li>' >> /html/index.html

		FIRST_SERVER=$(echo $SERVER | cut -d' ' -f1)

		cat << EOF > "$CONF_DIR/100-$FIRST_SERVER.nginx-dconf.conf"
server {
	listen 80;
	server_name $SERVER;
	location / {
		access_log /var/log/nginx/access.log vcombined;
		include include/headers-public-vhost.conf;
		modsecurity on;
		modsecurity_rules '
			SecRuleEngine On
			SecRuleRemoveById 911100 949110 941100 941130 941160 941170
		';
		proxy_http_version 1.1;
		proxy_buffering off;
		proxy_set_header Host \$http_host;
		proxy_set_header Upgrade \$http_upgrade;
		proxy_set_header Connection \$proxy_connection;
		proxy_set_header X-Real-IP \$remote_addr;
		proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto \$proxy_x_forwarded_proto;
		proxy_set_header X-Forwarded-Ssl \$proxy_x_forwarded_ssl;
		proxy_set_header X-Forwarded-Port \$proxy_x_forwarded_port;
		proxy_set_header Proxy "";
		proxy_connect_timeout 60s;
		proxy_send_timeout 300s;
		proxy_read_timeout 300s;
		proxy_set_header Accept-Encoding "";
		proxy_pass http://$IP:$PORT;
	}
}
server {
	listen 443 ssl http2;
	server_name $SERVER;
	access_log /var/log/nginx/access.log vcombined;
	ssl_certificate /etc/nginx/certs/hosts.pem;
	ssl_certificate_key /etc/nginx/certs/hosts-key.pem;
	location / {
		include include/headers-public-vhost.conf;
		modsecurity on;
		modsecurity_rules '
			SecRuleEngine On
			SecRuleRemoveById 911100 949110 941100 941130 941160 941170
		';
		proxy_http_version 1.1;
		proxy_buffering off;
		proxy_set_header Host \$http_host;
		proxy_set_header Upgrade \$http_upgrade;
		proxy_set_header Connection \$proxy_connection;
		proxy_set_header X-Real-IP \$remote_addr;
		proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto \$proxy_x_forwarded_proto;
		proxy_set_header X-Forwarded-Ssl \$proxy_x_forwarded_ssl;
		proxy_set_header X-Forwarded-Port \$proxy_x_forwarded_port;
		proxy_set_header Proxy "";
		proxy_connect_timeout 60s;
		proxy_send_timeout 300s;
		proxy_read_timeout 300s;
		proxy_set_header Accept-Encoding "";
		proxy_pass http://$IP:$PORT;
	}
}
EOF
		echo "$CONF_DIR/100-$FIRST_SERVER.nginx-dconf.conf written."
	fi
}

function listen {
	while read line ; do
	# ID=$(echo $line | cut -d' ' -f 4)
	# RUNNING=$(docker inspect -f '{{json .State.Running }}' $ID 2> /dev/null)
	# if [ "$RUNNING" == "true" ]; then
	# 	config $ID
	# 	docker kill -s HUP dev_nginx_1
	# fi
	start
	done < <(docker events --filter "event=start" --filter "event=stop" --filter "label=traefik.port")
}

function start {
	echo '<html><head><title>dev proxy</title></head><body><h1>Vhost not found</h1><ul>' > /html/index.html
	rm -rf "$CONF_DIR"/100-*.nginx-dconf.conf

	for ID in $(docker ps --filter "label=traefik.port" -q); do
		config $ID
	done

	docker kill -s HUP dev_nginx_1

	echo '</ul></body></html>' >> /html/index.html
}

start

listen